[
  {
    "Id": 1,
    "Title": "فصل دهم Clean Architecture - تفکیک رابط",
    "Description": "همانطور که تصویر بالا مشاهده می‌کنید، چندین User داریم که از توابع موجود در OPS استفاده می‌کنند. بیاید اینگونه فرض کنیم که User1 فقط از op1 و User2 فقط از op2 و نهایتا User3 فقط از op3 استفاده می‌کند.",
    "ImageUrl": "https://files.virgool.io/upload/users/55915/posts/qd7cfmpds2eq/5bv3qqcxdb7d.png",
    "PublishDate": "2018-05-06",
    "Body": "حال فرض کنید که کلاس OPS با زبان جاوا یا C# توسعه داده شده باشد، در این شرایط User1 با اینکه هیچ استفاده ای از op2 و op3 ندارد ولی به طور ناخواسته به این دو تابع وابسته است. این وابستگی به این معنا است که در صورتی که سورس هر کدام از این دو تابع تغییر کند، با اینکه User1 استفاده‌ای از آن‌ها ندارد ولی مجدد Compile و Deploy می‌شود."
  },
  {
    "Id": 2,
    "Title": "قسمت صفر DDD - مقدمه",
    "Description": "مدتی بود که قصد داشتم کمی در مورد DDD بنویسم اما قسمت نمی‌شد. البته کار ترجمه کتاب Clean Architecture هم برای دور شدن از این کار بی تاثیر نبود. هر وقت فرصت نوشتن دست میداد احساس تعهد به",
    "ImageUrl": "https://files.virgool.io/upload/users/55915/posts/qfntyfmwou1v/dpthsbdam7va.jpeg",
    "PublishDate": "2018-06-06",
    "Body": "در پایان برای این نوشته هم میگم که تمام سعی خودم رو می‌کنم که مطالب کامل و جامع و بدون اشتباه باشه، اما مطمئنا هیچ مطلبی بی ایراد و خطا نخواهد بود، پس سپاسگزار می‌شم اگر ایرادی در نوشته‌مشاهده کردید از طریق ایمیل با من در تماس باشید."
  },
  {
    "Id": 3,
    "Title": "قسمت اول DDD - دامنه چیست؟",
    "Description": "به طور کلی هر حوزه تخصصی را دامنه یا Domain می‌نامیم. کمی دقیق‌تر اگر بخواهیم تعریف کنیم، مجموعه‌ی مفاهیم و دانش‌های منسجم در یک حوزه‌ دامنه آن حوزه است. در حوزه Domain Driven Design که از این به",
    "ImageUrl": "https://files.virgool.io/upload/users/55915/posts/qs5lf63l9kof/5enoovms05nd.png",
    "PublishDate": "2019-01-01",
    "Body": "بدون توجه به سطح دانش فنی که در حال حاضر داریم، حرفه‌ای که در آن فعالیت می‌کنیم نیاز دائمی به کسب دانش و استفاده از آن دارد. این دانش در حوزه‌های مختلفی مثل دانش عمومی شبکه و وب، شی گرایی، زبان برنامه‌نویسی، معماری‌نرم‌افزار، عملکرد سیستم‌عامل و ... مورد نیاز است. هنگامی که شروع به مطالعه هرکدام از این موارد کنیم، احتمالا هر یک را با مثال‌های عملیاتی قابل لمس یاد خواهیم گرفت. اما جدای از صورت مسئله و مثالی که با آن این دانش‌ها را نهادینه می‌کنیم، هر کدام از این دانش‌ها ابزاری است که به طور مسقل می‌تواند در حوزه‌های کاری مختلف مورد استفاده قرار گیرد."
  },
  {
    "Id": 4,
    "Title": "قسمت دوم DDD - آشنایی با Domain Model,",
    "Description": "شاید بهترین روش برای شروع این بخش استفاده از تعریف آقای Eric Evans برای مدل دامنه است. ایشان مدل دامنه را اینگونه تعریف می‌کنند:",
    "ImageUrl": "https://files.virgool.io/upload/users/55915/posts/uobyrqspnykl/f0o34bl1ixm6.png",
    "PublishDate": "2020-02-19",
    "Body": "مدل دامنه یا همان Domain Model مجموعه‌ای انتزاعی از دانش برای حل مشکلی است که با آن سر و کار داریم. کلمه مدل در دنیای برنامه‌نویسی کاربرد‌های فراوانی دارد و این کاربرد زیاد کمی تعریف مدل دامنه را مشکل می‌کند. برای مثال چندین الگوی مختلف مثل MVVM و MVC داریم که در آن‌ها کلمه مدل به معانی مختلفی استفاده شده است این کاربرد‌ها باعث ایجاد پیش‌زمینه‌ای در ذهن همه گشته است. در برخی تعاریف کد‌های برنامه را مدل دامنه در نظر می‌گیرند که باید بگویم مدل دامنه کد‌های ما نیست. دانش ساختار‌یافته در حوزه دامنه‌ای که با آن سر و کار داریم و آن دانش پایه و اساس نرم‌افزار و سایر مصنوعات پروژه ما را تشکیل می‌دهدمدل دامنه ماست. لزوما هنگام پیاده سازی ما کل این مدل را پیاده سازی نمی‌کنیم و ممکن است بخشی از این مدل را پیاده کنیم. به جز اینکه کلمه مدل در دنیای نرم‌افزار زیاد استفاده می‌شود، در حوزه Domain Driven Design نیز از این کلمه استفاده‌های زیادی می‌شود و بعضا جا به جا هم استفاده می‌شود. برای حذف مشکلات و جلوگیری از اشتباه اینجا به تعریف سه کلمه خاص می‌پردازیم."
  },
  {
    "Id": 5,
    "Title": "قسمت سوم DDD - آشنایی با Bounded Context",
    "Description": "یکی از مشکل‌ترین و در عین حال ساده ترین مفاهیمی که با آن سر و کار داریم Bounded Context است که از این به بعد به اختصار به آن BC یا مرز مسئله می‌گوییم. BC محدوده‌ای منطقی است که، کاربردی و قابل اجرا",
    "ImageUrl": "https://files.virgool.io/upload/users/55915/posts/irst3jkvubj0/n1b4b5ouajvl.png",
    "PublishDate": "2020-03-26",
    "Body": "فاهیم دامنه، مدل دامنه و مرز مسئله ارتباط بسیار نزدیکی دارند و ممکن است با هم اشتباه هم گرفته ‌شوند. به طور کلی اگر در مورد DDD مطالعه و بررسی کنیم در می‌یابیم که این مفاهیم، بسیار پر بحث و چالش برانگیز هستند. شاید یکی از دلایل چالش‌ها این باشد که، صحبت در مورد مفاهیم نظری،منطقی و شاید به تعبیری فلسفی و صحت سنجی آن‌ها بسیار سخت‌تر از مباحث فنی و عملی است. دامنه مسئله و در ادامه آن زیردامنه‌های آن محدوده‌های دانش‌های مرتبط به هم هستند، یعنی دانش موجود را برای ما دسته بندی می‌کنند. در مقابل مدل دامنه انتزاعات شخصی از دامنه است که، با یک زبان مشخص از دامنه موجود استخراج شده است. ساختار و محتوای این انتزاعات از قبل تعیین نشده است. در آخر به مرز مسئله میرسیم. BCها یک مرز منطقی مشخص هستند که یک نام اختصاصی دارند و کاربردی بودن مدل دامنه داخل خود را تعیین می‌کنند. به طور خلاصه با این سه کلمه سر و کار داریم:"
  },
  {
    "Id": 6,
    "Title": "فصل یازدهم Clean Architecture - معکوس‌سازی وابستگی",
    "Description": "اصل وارونگی وابستگی یا Dependency Inversion Principle که از این به بعد به آن DIP می‌گوییم، به بیان این مطلب می‌پردازد که بیشترین انعطاف در سیستم‌ها زمانی به دست می‌آید که موقع نیاز به یک وابستگی، از طریق یک قرارداد این وابستگی تامین شود نه یک پیاده سازی خاص.",
    "ImageUrl": "https://files.virgool.io/upload/users/55915/posts/t7kbdeadbvmm/swjmbavepmlg.jpeg",
    "PublishDate": "2021-04-11",
    "Body": "دقیق‌تر اگر نگاه کنیم، کلاس String بسیار با ثبات است. سالها برای طراحی و پیاده سازی آن زمان صرف شده‌است. این پیاده‌سازی با دقت بسیار بالایی انجام شده. درچنین کلاس‌هایی تغییرات نیز با وسواس خیلی زیادی انجام می‌شود. ثبات این کلاس در این حد بالاست که طراح سیستم نیازی به نگرانی در مورد تغییرات احتمالی آن ندارد."
  }
]
